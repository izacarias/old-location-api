// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ETSI GS MEC 013 - Location API
 *
 * The ETSI MEC ISG MEC013 Location API described using OpenAPI.
 *
 * API version: 3.1.1
 */

package location-api


import (
	"fmt"
)


// ConnectionType : This enumeration represents the connection type of an access point
type ConnectionType string

// List of ConnectionType
const (
	LTE ConnectionType = "LTE"
	WIFI ConnectionType = "Wifi"
	WIMAX ConnectionType = "Wimax"
	_5_G_NR ConnectionType = "5G NR"
	UNKNOWN ConnectionType = "UNKNOWN"
)

// AllowedConnectionTypeEnumValues is all the allowed values of ConnectionType enum
var AllowedConnectionTypeEnumValues = []ConnectionType{
	"LTE",
	"Wifi",
	"Wimax",
	"5G NR",
	"UNKNOWN",
}

// validConnectionTypeEnumValue provides a map of ConnectionTypes for fast verification of use input
var validConnectionTypeEnumValues = map[ConnectionType]struct{}{
	"LTE": {},
	"Wifi": {},
	"Wimax": {},
	"5G NR": {},
	"UNKNOWN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionType) IsValid() bool {
	_, ok := validConnectionTypeEnumValues[v]
	return ok
}

// NewConnectionTypeFromValue returns a pointer to a valid ConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionTypeFromValue(v string) (ConnectionType, error) {
	ev := ConnectionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ConnectionType: valid values are %v", v, AllowedConnectionTypeEnumValues)
}



// AssertConnectionTypeRequired checks if the required fields are not zero-ed
func AssertConnectionTypeRequired(obj ConnectionType) error {
	return nil
}

// AssertConnectionTypeConstraints checks if the values respects the defined constraints
func AssertConnectionTypeConstraints(obj ConnectionType) error {
	return nil
}
