// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ETSI GS MEC 013 - Location API
 *
 * The ETSI MEC ISG MEC013 Location API described using OpenAPI.
 *
 * API version: 3.1.1
 */

package location-api




type UserLocationPeriodicSubscription struct {

	Links Links `json:"_links,omitempty"`

	// Address of user (e.g. ‘sip’ URI, ‘tel’ URI, ‘acr’ URI) to monitor.
	Address string `json:"address"`

	// URI exposed by the client on which to receive notifications via HTTP. See note 1.
	CallbackReference string `json:"callbackReference,omitempty"`

	// A correlator that the client can use to tag this particular resource representation during a request to create a resource on the server. See note 2.
	ClientCorrelator string `json:"clientCorrelator,omitempty"`

	ExpiryDeadline TimeStamp `json:"expiryDeadline,omitempty"`

	PeriodicEventInfo PeriodicEventInfo `json:"periodicEventInfo"`

	// Set to TRUE by the service consumer to request a test notification via HTTP on the callbackReference URI, as specified in ETSI GS MEC 009 [4], clause 6.12a.
	RequestTestNotification bool `json:"requestTestNotification,omitempty"`

	// Shall be set to \"UserLocationPeriodicSubscription\".
	SubscriptionType string `json:"subscriptionType"`

	WebsockNotifConfig WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
}

// AssertUserLocationPeriodicSubscriptionRequired checks if the required fields are not zero-ed
func AssertUserLocationPeriodicSubscriptionRequired(obj UserLocationPeriodicSubscription) error {
	elements := map[string]interface{}{
		"address": obj.Address,
		"periodicEventInfo": obj.PeriodicEventInfo,
		"subscriptionType": obj.SubscriptionType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertLinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertTimeStampRequired(obj.ExpiryDeadline); err != nil {
		return err
	}
	if err := AssertPeriodicEventInfoRequired(obj.PeriodicEventInfo); err != nil {
		return err
	}
	if err := AssertWebsockNotifConfigRequired(obj.WebsockNotifConfig); err != nil {
		return err
	}
	return nil
}

// AssertUserLocationPeriodicSubscriptionConstraints checks if the values respects the defined constraints
func AssertUserLocationPeriodicSubscriptionConstraints(obj UserLocationPeriodicSubscription) error {
	if err := AssertLinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertTimeStampConstraints(obj.ExpiryDeadline); err != nil {
		return err
	}
	if err := AssertPeriodicEventInfoConstraints(obj.PeriodicEventInfo); err != nil {
		return err
	}
	if err := AssertWebsockNotifConfigConstraints(obj.WebsockNotifConfig); err != nil {
		return err
	}
	return nil
}
