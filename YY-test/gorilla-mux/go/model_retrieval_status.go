// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ETSI GS MEC 013 - Location API
 *
 * The ETSI MEC ISG MEC013 Location API described using OpenAPI.
 *
 * API version: 3.1.1
 */

package location-api


import (
	"fmt"
)



type RetrievalStatus string

// List of RetrievalStatus
const (
	RETRIEVED RetrievalStatus = "Retrieved"
	NOT_RETRIEVED RetrievalStatus = "NotRetrieved"
	ERROR RetrievalStatus = "Error"
)

// AllowedRetrievalStatusEnumValues is all the allowed values of RetrievalStatus enum
var AllowedRetrievalStatusEnumValues = []RetrievalStatus{
	"Retrieved",
	"NotRetrieved",
	"Error",
}

// validRetrievalStatusEnumValue provides a map of RetrievalStatuss for fast verification of use input
var validRetrievalStatusEnumValues = map[RetrievalStatus]struct{}{
	"Retrieved": {},
	"NotRetrieved": {},
	"Error": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RetrievalStatus) IsValid() bool {
	_, ok := validRetrievalStatusEnumValues[v]
	return ok
}

// NewRetrievalStatusFromValue returns a pointer to a valid RetrievalStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRetrievalStatusFromValue(v string) (RetrievalStatus, error) {
	ev := RetrievalStatus(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for RetrievalStatus: valid values are %v", v, AllowedRetrievalStatusEnumValues)
}



// AssertRetrievalStatusRequired checks if the required fields are not zero-ed
func AssertRetrievalStatusRequired(obj RetrievalStatus) error {
	return nil
}

// AssertRetrievalStatusConstraints checks if the values respects the defined constraints
func AssertRetrievalStatusConstraints(obj RetrievalStatus) error {
	return nil
}
