// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ETSI GS MEC 013 - Location API
 *
 * The ETSI MEC ISG MEC013 Location API described using OpenAPI.
 *
 * API version: 3.1.1
 */

package location-api




type ZoneStatusSubscription struct {

	Links Links `json:"_links,omitempty"`

	// URI exposed by the client on which to receive notifications via HTTP. See note 1.
	CallbackReference string `json:"callbackReference,omitempty"`

	// A correlator that the client can use to tag this particular resource representation during a request to create a resource on the server. See note 2.
	ClientCorrelator string `json:"clientCorrelator,omitempty"`

	ExpiryDeadline TimeStamp `json:"expiryDeadline,omitempty"`

	// Threshold number of users in an access point which if crossed downward shall cause a notification
	LowerNumberOfUsersAPThreshold int32 `json:"lowerNumberOfUsersAPThreshold,omitempty"`

	// Threshold number of users in a zone which if crossed downward shall cause a notification
	LowerNumberOfUsersZoneThreshold int32 `json:"lowerNumberOfUsersZoneThreshold,omitempty"`

	// List of operation status values to generate notifications for (these apply to all access points within a zone). See note 3.
	OperationStatus []OperationStatus `json:"operationStatus,omitempty"`

	ReportingCtrl ReportingCtrl `json:"reportingCtrl,omitempty"`

	// Set to TRUE by the service consumer to request a test notification via HTTP on the callbackReference URI, as specified in ETSI GSÂ MEC 009 [4], clause 6.12a.
	RequestTestNotification bool `json:"requestTestNotification,omitempty"`

	// Shall be set to \"ZoneStatusSubscription\".
	SubscriptionType string `json:"subscriptionType"`

	// Threshold number of users in an access point which if crossed upward shall cause a notification.
	UpperNumberOfUsersAPThreshold int32 `json:"upperNumberOfUsersAPThreshold,omitempty"`

	// Threshold number of users in a zone which if crossed upward shall cause a notification.
	UpperNumberOfUsersZoneThreshold int32 `json:"upperNumberOfUsersZoneThreshold,omitempty"`

	WebsockNotifConfig WebsockNotifConfig `json:"websockNotifConfig,omitempty"`

	// Identifier of zone (e.g. zone001) to monitor.
	ZoneId string `json:"zoneId"`
}

// AssertZoneStatusSubscriptionRequired checks if the required fields are not zero-ed
func AssertZoneStatusSubscriptionRequired(obj ZoneStatusSubscription) error {
	elements := map[string]interface{}{
		"subscriptionType": obj.SubscriptionType,
		"zoneId": obj.ZoneId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertLinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertTimeStampRequired(obj.ExpiryDeadline); err != nil {
		return err
	}
	if err := AssertReportingCtrlRequired(obj.ReportingCtrl); err != nil {
		return err
	}
	if err := AssertWebsockNotifConfigRequired(obj.WebsockNotifConfig); err != nil {
		return err
	}
	return nil
}

// AssertZoneStatusSubscriptionConstraints checks if the values respects the defined constraints
func AssertZoneStatusSubscriptionConstraints(obj ZoneStatusSubscription) error {
	if err := AssertLinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertTimeStampConstraints(obj.ExpiryDeadline); err != nil {
		return err
	}
	if err := AssertReportingCtrlConstraints(obj.ReportingCtrl); err != nil {
		return err
	}
	if err := AssertWebsockNotifConfigConstraints(obj.WebsockNotifConfig); err != nil {
		return err
	}
	return nil
}
