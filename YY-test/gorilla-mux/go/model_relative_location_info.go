// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ETSI GS MEC 013 - Location API
 *
 * The ETSI MEC ISG MEC013 Location API described using OpenAPI.
 *
 * API version: 3.1.1
 */

package location-api




type RelativeLocationInfo struct {

	// Indicates the value (in the unit of meters) on x-axis of the relative location in the Cartesian system. Positive value represents easting from origin.
	X float32 `json:"X"`

	// Indicates the value (in the unit of meters) on y-axis of the relative location in the Cartesian system. Positive value represents northing from origin.
	Y float32 `json:"Y"`

	// Indicates the value (in the unit of meters) on z-axis of the relative location in the Cartesian system for a 3DPoint. Positive value represents height above origin.
	Z float32 `json:"Z,omitempty"`

	MapInfo MapInfo `json:"mapInfo"`
}

// AssertRelativeLocationInfoRequired checks if the required fields are not zero-ed
func AssertRelativeLocationInfoRequired(obj RelativeLocationInfo) error {
	elements := map[string]interface{}{
		"X": obj.X,
		"Y": obj.Y,
		"mapInfo": obj.MapInfo,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertMapInfoRequired(obj.MapInfo); err != nil {
		return err
	}
	return nil
}

// AssertRelativeLocationInfoConstraints checks if the values respects the defined constraints
func AssertRelativeLocationInfoConstraints(obj RelativeLocationInfo) error {
	if err := AssertMapInfoConstraints(obj.MapInfo); err != nil {
		return err
	}
	return nil
}
